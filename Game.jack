/** Game class that controls the overall game flow */
class Game {
    field Gun gun;              // The player's gun
    field Wall wall;            // The wall where targets appear
    field ScoreBoard scoreBoard; // Tracks score and lives
    field int level;            // Current game level
    field int timer;            // Game timer (in cycles)
    field boolean exit;         // Exit flag
    field int score;            // Player's score
    field int lives;            // Player's lives
    field boolean gameRunning;  // Whether the game is currently running
    field int currentRound;     // Track current round
    field int totalRounds;      // Total rounds to complete
    field boolean roundComplete; // Flag for round completion
    field int mathTimer;        // Timer for math question
    field int totalLevels;      // Total number of levels
    field int roundsPerLevel;   // Rounds per level
    
    /** Constructs a new game */
    constructor Game new() {
        let gun = Gun.new();
        let wall = Wall.new();
        let scoreBoard = ScoreBoard.new();
        let level = 1;
        let timer = 3600;       // 1 minute (60 seconds * 60 cycles/second)
        let mathTimer = 1200;   // 20 seconds
        let exit = false;
        let score = 0;
        let lives = 3;
        let gameRunning = false;
        let currentRound = 1;
        let totalLevels = 2;
        let roundsPerLevel = 6;
        let roundComplete = false;
        return this;
    }
    
    /** Runs the game loop */
    method void run() {
        var char key;
        var boolean keyPressed;
        
        do drawTitleScreen();
        
        // Wait for Enter to start
        while (~gameRunning) {
            let key = Keyboard.keyPressed();
            
            if (key = 128) {  // Enter key to start game
                let gameRunning = true;
                do startGame();
            }
            
            do Sys.wait(50);
        }
        
        return;
    }
    
    /** Shows a random math question between levels. Returns 1 if correct, 0 if wrong */
    method int showMathQuestion() {
        var int num1, num2, correctAnswer, userAnswer, inputLen, i;
        var char key;
        var String answer;
        var String tempString;

        let num1 = Random.randRange(50);
        let num2 = Random.randRange(50);
        let correctAnswer = num1 + num2;
        let answer = String.new(5);
        let inputLen = 0;

        do Screen.clearScreen();
        do Output.moveCursor(10, 20);
        do Output.printString("Level 1 Complete!");
        do Output.moveCursor(12, 20);
        do Output.printString("Answer this question to continue:");
        do Output.moveCursor(14, 20);
        do Output.printString("What is ");
        do Output.printInt(num1);
        do Output.printString(" + ");
        do Output.printInt(num2);
        do Output.printString("?");

        // Accept up to 5 digits, Enter to submit
        while (true) {
            let key = Keyboard.keyPressed();
            if ((key > 47) & (key < 58) & (inputLen < 5)) {  // Number keys
                do answer.appendChar(key);
                let inputLen = inputLen + 1;
                do Output.moveCursor(16, 20);
                do Output.printString(answer);
                // Wait for key release
                while (~(Keyboard.keyPressed() = 0)) {
                    do Sys.wait(5);
                }
            }
            if (key = 128) {  // Enter key
                // Convert answer string to int
                let userAnswer = 0;
                let i = 0;
                while (i < inputLen) {
                    let userAnswer = userAnswer * 10 + (String.charAt(answer, i) - 48);
                    let i = i + 1;
                }
                if (userAnswer = correctAnswer) {
                    let score = score + 100;
                    do Output.moveCursor(18, 20);
                    do Output.printString("Correct! +100 points!");
                    do Sys.wait(2000);
                    do answer.dispose();
                    return 1;
                } else {
                    let lives = lives - 1;
                    do Output.moveCursor(18, 20);
                    do Output.printString("Wrong! -1 life");
                    do Sys.wait(2000);
                    do answer.dispose();
                    return 0;
                }
            }
            do Sys.wait(10);
        }
        // ...should never reach here...
        do answer.dispose();
        return 0;
    }

    /** Modified startGame method */
    method void startGame() {
        var char key;
        var boolean keyHeld;
        
        let timer = 3600;      // 1 minute
        let score = 0;
        let keyHeld = false;
        let currentRound = 1;
        let roundComplete = false;
        
        // Start first round
        do Screen.clearScreen();
        do gun.draw();
        do wall.initialize();
        do wall.addStar();
        do scoreBoard.update(score, lives, timer / 60);
        
        // Main game loop
        while ((timer > 0) & (~exit)) {
            let key = Keyboard.keyPressed();
            
            if (key = 81) {  // 'Q' to quit
                let gameRunning = false;
            }
            
            if (key = 130) {  // Left arrow
                do gun.moveLeft();
            }
            
            if (key = 132) {  // Right arrow
                do gun.moveRight();
            }
            
            if ((key = 32) & (~keyHeld)) {  // 'Spacebar' to shoot
                let keyHeld = true;
                do shoot();
            }
            
            if (key = 0) {
                let keyHeld = false;
            }
            
            // Update target positions with lives parameter
            do wall.updateTargets(level, lives);
            
            if (wall.isRoundComplete()) {
                let currentRound = currentRound + 1;
                
                if (currentRound > roundsPerLevel) {
                    if (level = 1) {
                        if (showMathQuestion() = 1) {  // Check return value
                            let level = 2;
                            let currentRound = 1;
                        } else {
                            if (lives < 1) {  // If no lives left
                                do gameOver();
                                return;
                            }
                        }
                    } else {
                        do displayCongratulations();
                        let gameRunning = false;
                        return;
                    }
                }
                
                do Screen.clearScreen();  // Clear screen between rounds
                do gun.draw();  // Redraw gun
                do wall.initialize();
                do wall.addStar();
                do Sys.wait(500);  // Short pause between rounds
            }
            
            do scoreBoard.update(score, lives, timer / 60);
            let timer = timer - 1;
            
            if (timer < 1) {
                do displayGameLost();
                if (~exit) {  // Only if player didn't choose to exit
                    return;
                }
            }
            
            do Sys.wait(16);
        }
        
        do gameOver();
        return;
    }
    
    /** Modified shoot method to handle heart bonus */
    method void shoot() {
        var int targetHit;
        var int points;
        
        do gun.shoot();
        let targetHit = wall.checkHit(gun.getX());
        
        if (targetHit = 6) {  // Heart
            let lives = lives + 1;
            if (lives > 3) { let lives = 3; }
            do scoreBoard.update(score, lives, timer / 60);  // Immediately update display
        }
        
        if (targetHit = 1) {  // Circle
            let score = score + 2;
        }
        if (targetHit = 2) {  // Square
            let score = score + 3;
        }
        if (targetHit = 3) {  // Triangle
            let score = score + 5;
        }
        if (targetHit = 4) {  // Diamond
            let score = score + 4;
        }
        if (targetHit = 5) {  // Star
            let score = score + 10;
        }
        return;
    }

    method void drawTitleScreen() {
        var char key;
        
        do Screen.clearScreen();
        
        // Draw borders
        do Screen.drawLine(30, 30, 480, 30);   // Top edge
        do Screen.drawLine(30, 30, 30, 230);   // Left edge
        do Screen.drawLine(30, 230, 480, 230); // Bottom edge
        do Screen.drawLine(480, 30, 480, 230); // Right edge

        // Inner box
        do Screen.drawLine(33, 33, 477, 33);   // Top edge
        do Screen.drawLine(33, 33, 33, 227);   // Left edge
        do Screen.drawLine(33, 227, 477, 227); // Bottom edge
        do Screen.drawLine(477, 33, 477, 227); // Right edge

        // Draw title letters
        // A
        do Screen.drawLine(90, 150, 105, 110);   // Left diagonal
        do Screen.drawLine(105, 110, 120, 150);   // Right diagonal
        do Screen.drawLine(96, 130, 114, 130);   // Crossbar

        // I
        do Screen.drawLine(130, 110, 130, 150);   // Vertical

        // M
        do Screen.drawLine(140, 150, 140, 110);   // Left vertical
        do Screen.drawLine(140, 110, 155, 130);   // Left diagonal up
        do Screen.drawLine(155, 130, 170, 110);   // Right diagonal down
        do Screen.drawLine(170, 110, 170, 150);   // Right vertical

        // A
        do Screen.drawLine(190, 150, 205, 110);   // Left diagonal
        do Screen.drawLine(205, 110, 220, 150);   // Right diagonal
        do Screen.drawLine(196, 130, 214, 130);   // Crossbar

        // N
        do Screen.drawLine(230, 150, 230, 110);   // Left vertical
        do Screen.drawLine(230, 110, 245, 150);   // Diagonal
        do Screen.drawLine(245, 150, 245, 110);   // Right vertical

        // D
        do Screen.drawLine(255, 150, 255, 110);   // Left vertical
        do Screen.drawLine(255, 110, 270, 120);   // Top curve
        do Screen.drawLine(270, 120, 270, 140);   // Right vertical
        do Screen.drawLine(270, 140, 255, 150);   // Bottom curve

        // C
        do Screen.drawLine(290, 110, 310, 110);   // Top
        do Screen.drawLine(290, 110, 290, 150);   // Left
        do Screen.drawLine(290, 150, 310, 150);   // Bottom

        // L
        do Screen.drawLine(320, 110, 320, 150);   // Vertical
        do Screen.drawLine(320, 150, 340, 150);   // Bottom

        // A
        do Screen.drawLine(350, 150, 365, 110);   // Left diagonal
        do Screen.drawLine(365, 110, 380, 150);   // Right diagonal
        do Screen.drawLine(356, 130, 374, 130);   // Crossbar

        // I
        do Screen.drawLine(390, 110, 390, 150);   // Vertical

        // M
        do Screen.drawLine(400, 150, 400, 110);   // Left vertical
		do Screen.drawLine(400, 110, 415, 130);   // Left diagonal up
		do Screen.drawLine(415, 130, 430, 110);   // Right diagonal down
		do Screen.drawLine(430, 110, 430, 150);   // Right vertical
        // Print instructions
        do Output.moveCursor(20, 18);
        do Output.printString("Press ENTER to continue");

        return;
    }
    
    /** Displays the game over screen */
    method void gameOver() {
        do Screen.clearScreen();
        do Output.moveCursor(10, 26);
        do Output.printString("GAME OVER");
        do Output.moveCursor(12, 15);
        do Output.printString("Your score: ");
        do Output.printInt(score);
        do Output.moveCursor(14, 15);
        do Output.printString("Lives remaining: ");
        do Output.printInt(lives);
        do Output.moveCursor(16, 15);
        do Output.printString("Press 'P' to play again");
        do Output.moveCursor(18, 15);
        do Output.printString("Press 'Q' to quit");
        return;
    }
    
    /** Display congratulations message */
    method void displayCongratulations() {
        do Screen.clearScreen();
        do Output.moveCursor(10, 20);
        do Output.printString("CONGRATULATIONS!");
        do Output.moveCursor(12, 15);
        do Output.printString("You completed all rounds!");
        do Sys.wait(2000);
        return;
    }
    
    /** Display game lost message and handle continue/exit options */
    method void displayGameLost() {
        var char key;
        var boolean chosen;
        
        let lives = lives - 1;  // Reduce lives when game is lost
        
        if (lives > 0) {
            do Screen.clearScreen();
            do Output.moveCursor(10, 22);
            do Output.printString("TIME'S UP!");
            do Output.moveCursor(12, 15);
            do Output.printString("Lives remaining: ");
            do Output.printInt(lives);
            do Output.moveCursor(14, 15);
            do Output.printString("1. Continue Game");
            do Output.moveCursor(16, 15);
            do Output.printString("2. Exit Game");
            
            let chosen = false;
            while (~chosen) {
                let key = Keyboard.keyPressed();
                if (key = 49) {  // '1' key - Continue
                    let chosen = true;
                    let timer = 3600;  // Reset timer
                    let currentRound = 1;  // Reset to round 1
                    do startGame();
                }
                if (key = 50) {  // '2' key - Exit
                    let chosen = true;
                    let exit = true;
                    let gameRunning = false;
                }
                do Sys.wait(50);
            }
        } else {
            do Screen.clearScreen();
            do Output.moveCursor(10, 22);
            do Output.printString("GAME OVER!");
            do Output.moveCursor(12, 15);
            do Output.printString("No lives remaining");
            do Output.moveCursor(14, 15);
            do Output.printString("Your final score: ");
            do Output.printInt(score);
            do Sys.wait(2000);
            let gameRunning = false;
        }
        return;
    }
    
    /** Disposes of the game resources */
    method void dispose() {
        do gun.dispose();
        do wall.dispose();
        do scoreBoard.dispose();
        do Memory.deAlloc(this);
        return;
    }
}
