/** Wall class that manages the targets */
class Wall {
    field Array targets;       // Array of targets
    field Array targetTypes;   // Type of each target (1=Circle, 2=Square, etc.)
    field Array targetX;       // X position of each target
    field Array targetY;       // Y position of each target
    field Array targetActive;  // Whether each target is active
    field int maxTargets;      // Maximum number of targets
    field int activeTargets;   // Current number of active targets
    field boolean starActive;     // Track if star is active
    
    // Slight change
    constructor Wall new() {    
        let maxTargets = 10;
        let targets = Array.new(maxTargets);
        let targetTypes = Array.new(maxTargets);
        let targetX = Array.new(maxTargets);
        let targetY = Array.new(maxTargets);
        let targetActive = Array.new(maxTargets);
        let activeTargets = 0;
        let starActive = false;
        return this;
    }
    

    // Already present
    /** Initializes the wall with targets */
    method void initialize() {
        var int i;
        let i = 0;
        let activeTargets = 0;
        let starActive = false;
        
        // Clear all existing targets
        while (i < maxTargets) {
            let targetActive[i] = false;
            let i = i + 1;
        }
        
        // Generate new targets
        let i = 0;
        while (i < 5) {  // Reduced number of initial targets
            let targetTypes[i] = Random.randRange(4) + 1;            
            let targetX[i] = 50 + (i * 80);  // More spread out
            let targetY[i] = 50 + (Random.randRange(4) * 30);
            let targetActive[i] = true;
            do drawTarget(i);
            let activeTargets = activeTargets + 1;
            let i = i + 1;
        }
        return;
    }


    // Already present
    /** Adds a star bonus target */
    method void addStar() {
        var int i;
        let i = 0;
        
        // Find inactive slot
        while (i < maxTargets) {
            if (~targetActive[i]) {
                let targetTypes[i] = 5;  // 5 = Star
                let targetX[i] = 100 + (Random.randRange(7) * 40);
                let targetY[i] = 80 + (Random.randRange(3) * 40);
                let targetActive[i] = true;
                do drawTarget(i);
                let activeTargets = activeTargets + 1;
                return;
            }
            let i = i + 1;
        }
        return;
    }
    

    // Already present
    /** Checks if current round is complete */
    method boolean isRoundComplete() {
        var boolean complete;
        let complete = (activeTargets = 0);
        return complete & (~starActive);
    }
    

    // Modified
    /** Draws a specific target */
    method void drawTarget(int index) {
        var int type, x, y, size;
        
        if ((index < 0) | (index > maxTargets)) {
            return; // Index out of bounds, exit the method
        }
        
        let type = targetTypes[index];
        let x = targetX[index];
        let y = targetY[index];
        let size = 15;  // Default size
        
        do Screen.setColor(true);
        
        if (type = 1) {  // Circle
            do Screen.drawCircle(x, y, size);
        }
        if (type = 2) {  // Square
            do Screen.drawRectangle(x - size, y - size, x + size, y + size);
        }
        if (type = 3) {  // Triangle
            do drawTriangle(x, y, size);
        }
        if (type = 4) {  // Diamond
            do drawDiamond(x, y, size);
        }
        if (type = 5) {  // Star (bonus)
            do drawStar(x, y, size);
        }
        return;
    }
    
    
    // Already present
    /** Draws a triangle */
    method void drawTriangle(int x, int y, int size) {
        do Screen.drawLine(x, y - size, x - size, y + size);
        do Screen.drawLine(x - size, y + size, x + size, y + size);
        do Screen.drawLine(x + size, y + size, x, y - size);
        return;
    }


    // Already present    
    /** Draws a diamond */
    method void drawDiamond(int x, int y, int size) {
        do Screen.drawLine(x, y - size, x + size, y);
        do Screen.drawLine(x + size, y, x, y + size);
        do Screen.drawLine(x, y + size, x - size, y);
        do Screen.drawLine(x - size, y, x, y - size);
        return;
    }


    // Already present    
    /** Draws a star */
    method void drawStar(int x, int y, int size) {
        var int s;
        let s = size;
        
        // Outer points
        do Screen.drawLine(x, y - s, x + (s / 3), y - (s / 3));
        do Screen.drawLine(x + (s / 3), y - (s / 3), x + s, y);
        do Screen.drawLine(x + s, y, x + (s / 3), y + (s / 3));
        do Screen.drawLine(x + (s / 3), y + (s / 3), x, y + s);
        do Screen.drawLine(x, y + s, x - (s / 3), y + (s / 3));
        do Screen.drawLine(x - (s / 3), y + (s / 3), x - s, y);
        do Screen.drawLine(x - s, y, x - (s / 3), y - (s / 3));
        do Screen.drawLine(x - (s / 3), y - (s / 3), x, y - s);
        
        return;
    }

    
    // Slightly Modified
    /** Checks if a shot hits a target */
    method int checkHit(int gunX) {
        var int i, tX, tY, type, distance, hitType;
        let i = 0;
        let hitType = 0;
        
        while (i < maxTargets) {
            if (targetActive[i]) {
                let tX = targetX[i];
                let tY = targetY[i];
                let type = targetTypes[i];
                
                if (gunX > tX) {
                    let distance = gunX - tX;
                } else {
                    let distance = tX - gunX;
                }
                
                if (distance < 20) {  // Hit threshold
                    do clearTarget(i);
                    let targetActive[i] = false;
                    let activeTargets = activeTargets - 1;
                    let hitType = type;
                    if (type = 5) { // Star hit
                        let starActive = false;
                    }
                    
                    return hitType;
                }
            }
            let i = i + 1;
        }
        return 0;
    }
    

    // slightly modified
    /** Clears a target from the screen */
    method void clearTarget(int index) {
        var int type, x, y, size;
        
        let type = targetTypes[index];
        let x = targetX[index];
        let y = targetY[index];
        let size = 15;  // Default size
        
        do Screen.setColor(false);
        
        if (type = 1) {  // Circle
            do Screen.drawCircle(x, y, size);
        }
        if (type = 2) {  // Square
            do Screen.drawRectangle(x - size, y - size, x + size, y + size);
        }
        if (type = 3) {  // Triangle
            do drawTriangle(x, y, size);
        }
        if (type = 4) {  // Diamond
            do drawDiamond(x, y, size);
        }
        if (type = 5) {  // Star (bonus)
            do drawStar(x, y, size);
        }
        return;
    }
    

    /** Regenerates targets */
    method void regenerateTargets() {
        var int i, type, x, y;
        let i = 0;
        
        while (i < maxTargets) {
            // Only regenerate targets that are not active
            if (~targetActive[i]) {
                let type = Random.randRange(4) + 1;  // 1-4 for normal shapes
                let x = 50 + (Random.randRange(9) * 45);
                let y = 50 + (Random.randRange(4) * 30);
                
                let targetTypes[i] = type;
                let targetX[i] = x;
                let targetY[i] = y;
                let targetActive[i] = true;
                
                do drawTarget(i);
                let activeTargets = activeTargets + 1;
            }
            let i = i + 1;
        }
        
        return;
    }
    
    
    // Already present
    /** Disposes of the wall */
    method void dispose() {
        do targetX.dispose();
        do targetY.dispose();
        do targetTypes.dispose();
        do targetActive.dispose();
        do targets.dispose();
        do Memory.deAlloc(this);
        return;
    }
}
